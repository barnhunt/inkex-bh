name: Tests

on:
  - push
  - pull_request

env:
  'default-python-version': '3.12'

jobs:
  tests:
    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - os: 'windows-latest'
            python-version: '3.12'
            install-inkscape: true
          - os: 'macos-latest'
            python-version: '3.12'
            install-inkscape: true

          - python-version: '3.12'
            install-inkscape: true

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install inkscape (apt)
      if: runner.os == 'Linux' && matrix.install-inkscape
      run: |
        sudo apt update
        sudo apt install -y inkscape optipng

    - name: Install inkscape (chocolatey)
      if: runner.os == 'Windows' && matrix.install-inkscape
      run: choco install --no-progress --timeout 600 inkscape
      # (skip optipng installation to save CPU)

    - name: Install inkscape (homebrew)
      if: runner.os == 'macOS' && matrix.install-inkscape
      # This step seems to fail sporadically
      continue-on-error: true
      run: brew install inkscape
      # (skip optipng installation to save CPU)

    - name: Install tox
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions

    - name: Test with tox
      run: tox

    - uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: .coverage.*

  coverage:
    name: Coverage Report
    needs: tests
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.default-python-version }}
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml]
    - uses: actions/download-artifact@v3
      with:
        name: coverage-data
    - name: Test coverage and generate reports
      run: |
        coverage combine
        coverage html
        coverage report --fail-under=100 --show-missing
    - name: Upload HTML coverage report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: htmlcov
        path: htmlcov

  lint:
    name: Lint Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.default-python-version }}
    - name: Install tox
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Lint
      run: tox -e lint

  build:
    name: Possibly make GH release and upload to PyPI
    needs: [tests, coverage, lint]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.default-python-version }}

    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        pip install hatch hatch-vcs twine

    - run: hatch build --clean
        --target sdist
        --target wheel
        --target zipped-directory

    - uses: actions/upload-artifact@v3
      with:
        path: dist/

    - run: twine check dist/*.whl dist/*.tar.gz

    - name: classify tag
      id: classify-tag
      run: |
        if [[ ${{ github.ref }} =~ ^refs/tags/v[[:digit:]]+(\.[[:digit:]]+){2}$ ]]; then
          echo "is_release=true" >> $GITHUB_ENV
        fi

    - name: Create GH Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.zip
        fail_on_unmatched_files: true
        generate_release_notes: true
        draft: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        prerelease: ${{ env.is_release != 'true' }}

    - name: Upload to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: python -m twine upload dist/*.whl dist/*.tar.gz
